# SPDX-FileCopyrightText: 2022 - 2024 Slavi Pantaleev
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
- name: (Deprecation) Catch and report renamed settings
  ansible.builtin.fail:
    msg: >-
      Your configuration contains a variable, which now has a different name.
      Please change your configuration to rename the variable (`{{ item.old }}` -> `{{ item.new }}`).
  when: "lookup('ansible.builtin.varnames', ('^' + item.old + '$'), wantlist=True) | length > 0"
  with_items:
    - { "old": "woodpecker_ci_server_server_fqn", "new": "woodpecker_ci_server_hostname" }
    - { "old": "woodpecker_ci_server_systemd_required_systemd_services_list", "new": "woodpecker_ci_server_systemd_required_services_list" }
    - { "old": "woodpecker_ci_server_systemd_required_systemd_services_list_default", "new": "woodpecker_ci_server_systemd_required_services_list_default" }
    - { "old": "woodpecker_ci_server_systemd_required_systemd_services_list_auto", "new": "woodpecker_ci_server_systemd_required_services_list_auto" }
    - { "old": "woodpecker_ci_server_systemd_required_systemd_services_list_custom", "new": "woodpecker_ci_server_systemd_required_services_list_custom" }
    - { "old": "woodpecker_ci_server_container_additional_environment_variables", "new": "woodpecker_ci_server_environment_variables_additional_variables" }

- name: Fail if required Woodpecker CI server settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item.name }}`) for using this role.
  when: "item.when | bool and vars[item.name] | length == 0"
  with_items:
    - { "name": "woodpecker_ci_server_hostname", when: true }
    - { "name": "woodpecker_ci_server_uid", when: true }
    - { "name": "woodpecker_ci_server_gid", when: true }
    - { "name": "woodpecker_ci_server_config_agent_secret", when: true }
    - { "name": "woodpecker_ci_server_provider", when: true }
    - "name": "woodpecker_ci_server_container_labels_traefik_compression_middleware_name"
      when: "{{ woodpecker_ci_server_container_labels_traefik_compression_middleware_enabled }}"

- name: Fail if required Woodpecker CI server + Gitea settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`).
  when: "woodpecker_ci_server_provider == 'gitea' and vars[item] == ''"
  with_items:
    - woodpecker_ci_server_config_gitea_url
    - woodpecker_ci_server_config_gitea_client
    - woodpecker_ci_server_config_gitea_secret

- name: Run if Traefik is enabled
  when: woodpecker_ci_server_container_labels_traefik_enabled | bool
  block:
    - name: Fail if required Gitea Traefik settings not defined
      ansible.builtin.fail:
        msg: >-
          You need to define a required configuration setting (`{{ item }}`).
      when: "lookup('vars', item, default='') | string | length == 0"
      with_items:
        - woodpecker_ci_server_container_labels_traefik_hostname
        - woodpecker_ci_server_container_labels_traefik_path_prefix

    # We ensure it doesn't end with a slash, because we handle both (slash and no-slash).
    # Knowing that `woodpecker_ci_server_container_labels_traefik_path_prefix` does not end with a slash
    # ensures we know how to set these routes up without having to do "does it end with a slash" checks elsewhere.
    - name: Fail if woodpecker_ci_server_container_labels_traefik_path_prefix ends with a slash
      ansible.builtin.fail:
        msg: >-
          woodpecker_ci_server_container_labels_traefik_path_prefix (`{{ woodpecker_ci_server_container_labels_traefik_path_prefix }}`) must either be `/` or not end with a slash (e.g. `/ci`).
      when: "woodpecker_ci_server_container_labels_traefik_path_prefix != '/' and woodpecker_ci_server_container_labels_traefik_path_prefix[-1] == '/'"
